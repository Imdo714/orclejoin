package com.kh.model.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import com.kh.model.vo.Member;

//DAO(Data Access Object) : DB에 직접적으로 접근해서 사용자의 요청에 맞는 sql문 실행 후 결과 반환(JDBC)
//							결과를 Controller로 다시 리턴 
public class MemberDao {
	
	/*
	 * *JDBC용 객체 -Connection : DB의 연결정보를 담고있는 객체 
	 * -[Prepared]Statement : 연결된 DB에
	 * SQL문을 전달해서 실행하고, 결과를 받아내는 객체 
	 * -ResultSet : SELECT문 실행 후 조회된 결과물들이 담겨있는 객체
	 * 
	 * *JDBC 과정(순서중요) 1) jdbc driver 등록 : 해당 DBMS(오라클)가 제공하는 클래스 등록 
	 * 2) Connection생성
	 * : 연결하고자 하는 DB정보를 입력해서 해당 DB와 연결하면서 생성
	 * 3) Statement생성 : Connection 객체를 이용해서
	 * 생성(SQL문 실행 및 결과받는 객체) 
	 * 4) SQL문 전달하면서 실행 : Statement 객체를 이용해서 SQL문 실행 
	 * 5) 결과받기 
	 * 		> SELECT문 실행 => ResultSet객체 (조회된 데이터들이 담겨있음) => 6_1) 
	 * 		> DML문 실행 => int(처리된 행 수) => 6_2)
	 * 
	 * 
	 * 6_1) ResultSet에 담겨있는 데이터들을 하나씩 하나씩 뽑아서 vo객체에 차근차근 옴겨담기[+ ArrList에 담아주기] 6_2)
	 * 6_2) 트렌잭션 처리 (성공했다면 commit, 실패했다면 rollback 실행)
	 * 
	 * 7) 다 사용한 JDBC용 객체를 반드시 지원 바난ㅂ(close) => 생성된 역순으로
	 * 
	 */
	
	/**
	 * 사용자가 입력한 정보들을 db에 추가시켜주는 메소드
	 * @param m : 사용자가 입력한 값드링 담겨있는 member객체
	 * @return : insert문 실행 후 처리된 행수
	 */
	public int insertMember(Member m) {
		//insert문 => 처리된 행수(int) => 트랜잭션 처리 
		
		// 필요한 변수들 먼저 세팅 
		int result = 0;	//처리된 결과(처리된 행수)를 받아줄 변수
		Connection conn = null;	// 연결된 db의 연결정보를 담는 객체
		Statement stmt = null;	// 완성된 sql문 전달해서 곧바로 실행 후 결과를 받는 객체 
		
		//실행할 sql문(완성된 형태)
		// INSERT INTO MEMBER
		// VALUES(SEQ_USERNO.NEXTVAL, 'user01', 'pass01', '홍길동', null, 23, 'user01@iei.or.kr', '01022222222', '부산', '등산, 영화보기', '2021-08-02');
		
		String sql = "INSERT INTO MEMBER VALUES(SEQ_USERNO.NEXTVAL, "
				+ "'" + m.getUserId() + "',"
				+ "'" + m.getUserPwd() + "',"
				+ "'" + m.getUserName() + "',"
				+ "'" + m.getGender() + "',"
						+ m.getAge() + ","
				+ "'" + m.getEmail() + "',"
				+ "'" + m.getPhone() + "',"
				+ "'" + m.getAddress() + "',"
				+ "'" + m.getHobby() + "', SYSDATE)";
		
		System.out.println(sql);
		try {
			// 1) jdbc driver등록
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) Connection 객체 생성 => db연결
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","JDBC","JDBC");
			
			// 3) statement 객체 생성
			stmt = conn.createStatement();
			
			// 4, 5) sql문 전달하면서 실행 후 결과받기(처리된 행수)
			result = stmt.executeUpdate(sql);
			
			// 6) 트랜잭션처리
			if (result > 0) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// 7) 다쓴 jdbc객체들 반환
			try {
				stmt.close();
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return result;
		
 	}
	
	
}
